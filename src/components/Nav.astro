---
import Icons from "./Icons.astro";

export interface Props {
    links: { href: string, name: string }[]
}
const { links } = Astro.props as Props
const currentPage = new URL(Astro.request.url)
const parts = currentPage.pathname.split('/').slice(1)
let currentSub
if (parts.length > 1) {
    currentSub = parts[0]
}
---

<script>
    import './Nav.ts'
</script>

<nav class="m-2" data-state="idle">
    <button class="justify-self-center p-0.5 shadow-[4px] shadow-black/5  rounded-md">
        <svg height="16" viewBox="0 0 40 16" class="">
            <circle cx="8" cy="8" r="3" />
            <circle cx="20" cy="8" r="3" />
            <circle cx="32" cy="8" r="3" />
        </svg>
    </button>

    <ul data-state="closed" class="links shadow-[16px] shadow-green-700/20 flex flex-col gap-2 p-2 rounded-sm">
        {links.map(link => {
        return <a aria-current={ currentPage.pathname==link.href ? 'page' : false} class={`rounded-sm ${ link.href===`/${currentSub}` ? 'subroute' : '' }`} href={link.href}>
            <Icons width={40} height={40} type={link.name} />
        </a>
        })}
    </ul>
</nav>

<style lang="scss">
    @keyframes fetching {
        0% {
            background-position-y: 0;
        }

        100% {
            background-position-y: 100%;
        }
    }

    nav {
        grid-row: 2;
        grid-column: 2;

        align-self: flex-end;
        justify-self: end;

        display: grid;

        height: max-content;
        z-index: 10;
    }


    nav[data-state=fetching] .links {

        &::before {
            animation-name: fetching;
            animation-duration: 2500ms;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
            opacity: 1;
        }

    }

    nav[data-state=done] .links {
        &::before {
            transition-timing-function: ease-out;
            opacity: 0;
        }
    }

    button {
        grid-row: 1;
        grid-column: 1;
        align-self: flex-end;
    }

    .links {
        position: relative;
        background-color: white;
        grid-row: 1;
        grid-column: 1;
        transition: opacity, transform;
        transition-duration: 125ms;
        transition-timing-function: ease-out;
        align-items: center;
        overflow: hidden;
        pointer-events: none;

        &::before {
            content: '';
            width: 10%;
            top: 0;
            left: 0;
            height: 100%;
            background-size: 100% 10%;
            position: absolute;
            background-origin: border-box;
            background-image: linear-gradient(transparent 49%, black 51%);
            background-position-y: 0%;
            opacity: 0;
            transition-property: opacity;
            transition-duration: 175ms;
            transition-timing-function: ease-in;
            transition-delay: 75ms;
        }
    }

    .links[data-state=open] {
        opacity: 1;
        pointer-events: all;
    }

    .links[data-state=closed] {
        opacity: 0;
        transform: translateY(3px);
    }

    @screen sm {
        nav {
            grid-row: 1;
            grid-column: 1;
            align-self: flex-start;
            justify-self: flex-start;
        }

        button {
            display: none;
        }

        .links {
            opacity: 1 !important;
            transform: none !important;
            pointer-events: all;
            flex-direction: row;
        }
    }

    a {
        overflow: hidden;
        display: block;
        --fg-col: black;
        --bg-col: transparent;
        background-color: var(--bg-col);
        transition-property: color, background-color;
        transition-duration: 75ms;
        position: relative;
        transform: translate3d(0, 0, 0);

        &::after {
            width: 100%;
            height: 100%;
            content: '';
            top: 0;
            left: 0;
            transform: scaleY(0);
            transform-origin: bottom;
            @apply bg-secondary;
            position: absolute;
            transition-property: transform;
            transition-duration: 125ms;
        }

        &.subroute {
            outline-color: black;
            outline-width: 1px;
            outline-style: dashed;
            --s: 0.5;
        }
    }

    :global(.navigating-to) {
        &::after {
            transform: scaleY(0.75) !important;
        }
    }


    :global([aria-current="page"]) {

        :global(svg) {
            color: hsl(var(--col-wht)) !important;
            --col-0: hsl(var(--col-secondary)) !important;
        }

        &::after {
            transform: scaleY(1) !important;
        }

    }
</style>