---
import Icons from "./Icons.astro";

export interface Props {
    links: { href: string, name: string }[]
}
const { links } = Astro.props as Props
const currentPage = new URL(Astro.request.url)
---

<script>
    import './Nav.ts'
</script>

<nav class="m-2">
    <button class="justify-self-center border border-black/50 shadow-[20px] shadow-black/10  rounded-lg">
        <svg height="16" viewBox="0 0 40 16" class="">
            <circle cx="8" cy="8" r="3" />
            <circle cx="20" cy="8" r="3" />
            <circle cx="32" cy="8" r="3" />
        </svg>
    </button>

    <ul data-state="closed" class="links flex flex-col gap-3 p-2 rounded-sm">
        {links.map(link => {
        return <a aria-current={ currentPage.pathname==link.href ? 'page' : false} class="p-1  rounded-sm border border-black border-dashed" href={link.href}>
            <Icons width={20} height={20} type={link.name} />
        </a>
        })}
    </ul>
</nav>

<style lang="scss">
    nav {
        grid-row: 2;
        grid-column: 2;

        align-self: flex-end;
        justify-self: end;

        display: grid;

        // width: max-content;
        height: max-content;
        z-index: 10;
    }

    button {
        grid-row: 1;
        grid-column: 1;
        align-self: flex-end;
        // box-shadow: 0 0 0 30px black;
    }

    .links {
        background-color: white;
        grid-row: 1;
        grid-column: 1;
        box-shadow: 0 0 16px -4px hsl(0 0% 0% / 0.2);
        transition: opacity, transform;
        transition-duration: 125ms;
        transition-timing-function: ease-out;
        align-items: center;
    }

    .links[data-state=open] {
        opacity: 1;
    }

    .links[data-state=closed] {
        pointer-events: none;
        opacity: 0;
        transform: translateY(5px);
    }

    @media(min-width:512px) {
        .links {
            opacity: 1 !important;
            transform: none !important;
            pointer-events: all !important;
        }
    }

    a {
        overflow: hidden;
        display: block;
        --fg-col: black;
        --bg-col: transparent;
        // color: var(--fg-col);
        background-color: var(--bg-col);
        transition-property: color, background-color;
        transition-duration: 75ms;
        position: relative;
        transform: translate3d(0, 0, 0);

        :global(svg) {
            // overflow: hidden;
            // background-color: orange;
            // width: 20px;
        }

        // .background {
        //     position: absolute;
        //     left: 0;
        //     top: 0;
        //     width: 100%;
        //     height: 100%;
        //     background-color: aquamarine;
        //     transform-origin: bottom;
        //     transform: scaleY(0.1) translate3d(0, 0, 0);
        // }

        &::after {
            width: 100%;
            height: 100%;
            content: '';
            top: 0;
            left: 0;
            transform: scaleY(0);
            transform-origin: bottom;
            background-color: black;
            position: absolute;
            transition-property: transform;
            transition-duration: 125ms;
        }

        // &:hover {
        //     // --fg-col: white;
        //     // --bg-col: black;
        // }
    }

    :global(.navigating-to) {

        .background {
            // transform: scaleY(0.75);
        }

        &::after {
            transform: scaleY(0.75) !important;
        }
    }

    :global([aria-current="page"]) {
        color: white;
        &::after {
            transform: scaleY(1) !important;
        }

        // background-color: orange !important;
    }
</style>